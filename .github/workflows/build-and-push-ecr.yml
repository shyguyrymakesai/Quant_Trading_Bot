name: build-and-push-ecr

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    # Tweak these paths to match your appâ€™s change surface
    paths:
      - 'Dockerfile'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'src/**'
      - 'app/**'
      - '.github/workflows/build-and-push-ecr.yml'

permissions:
  id-token: write   # required for OIDC
  contents: read

concurrency:
  group: build-and-push-ecr-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: '969932165253'
  ECR_REPO: quant-bot-app
  IMAGE_URI: 969932165253.dkr.ecr.us-east-1.amazonaws.com/quant-bot-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # expose secrets as env so we can use env.* in `if:` safely
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: '969932165253'
      ECR_REPO: quant-bot-app
      IMAGE_URI: 969932165253.dkr.ecr.us-east-1.amazonaws.com/quant-bot-app
      AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- OIDC path (preferred) ---
      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_IAM_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- classic keys fallback ---
      - name: Configure AWS credentials (access keys)
        if: ${{ env.AWS_IAM_ROLE_ARN == '' && env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- helpful failure if neither path is configured ---
      - name: Fail if no AWS credentials provided
        if: ${{ env.AWS_IAM_ROLE_ARN == '' && (env.AWS_ACCESS_KEY_ID == '' || env.AWS_SECRET_ACCESS_KEY == '') }}
        run: |
          echo "No AWS credentials available. Set AWS_IAM_ROLE_ARN for OIDC or AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY for classic keys." >&2
          exit 1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

        # keep the rest of your steps the same:
      - name: Set tags
        id: vars
        run: |
          echo "sha_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      - name: Build and push
        run: |
          docker build -t $IMAGE_URI:${{ steps.vars.outputs.sha_tag }} -t $IMAGE_URI:${{ steps.vars.outputs.latest_tag }} .
          docker push $IMAGE_URI:${{ steps.vars.outputs.sha_tag }}
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            docker push $IMAGE_URI:${{ steps.vars.outputs.latest_tag }}
          fi

      - name: Output image URIs
        run: |
          echo "Pushed:"
          echo " - $IMAGE_URI:${{ steps.vars.outputs.sha_tag }}"
          [ "${GITHUB_REF}" = "refs/heads/main" ] && echo " - $IMAGE_URI:${{ steps.vars.outputs.latest_tag }}" || true
